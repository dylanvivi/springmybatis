<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="   
          http://www.springframework.org/schema/beans  
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
          http://www.springframework.org/schema/tx 
          http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context-3.0.xsd 
          http://www.springframework.org/schema/aop 
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd" default-autowire="byName" default-lazy-init="true"> 
	
	<context:annotation-config />
	
	<!-- 引入资源配置文件 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
    </bean>
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"></property>
		<property name="breakAfterAcquireFailure" value="${jdbc.breakAfterAcquireFailure}"></property>
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"></property>
	</bean>
    
    <!-- Mybatis's sqlSessionFactory config -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"></property>  
        <property name="configLocation" value="classpath:mybatis-config.xml"/>          
    </bean>  
    

    <!-- 定义事务处理类，不同的数据访问方式，事务处理类不同
        比如：Hibernate操作的HibernateTransactionManager，JDBC操作的使用DataSourceTransactionManager
     -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    	
	
	<!-- scan  mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">       
		<property name="basePackage" value="com.dylanvivi.dao" />
	</bean>
    <!-- 激活annotation功能 -->
	<context:annotation-config />
	<!-- 激活annotation功能 -->
	<context:spring-configured/>
    
	<context:component-scan base-package="com.dylanvivi" use-default-filters="false">
	   <context:include-filter type="regex" expression="com\.dylanvivi\...+"/>
    </context:component-scan>
	
</beans>
